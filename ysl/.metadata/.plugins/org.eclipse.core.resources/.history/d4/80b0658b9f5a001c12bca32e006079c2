package com.swempire.web.board.controller;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.swempire.web.board.model.BoardVO;
import com.swempire.web.board.service.BoardService;

@Controller
@RequestMapping(value = "/board")
public class BoardController {

	@Inject
	private BoardService boardService;

	@RequestMapping(value = "/getBoardList", method = RequestMethod.GET)
	public String getBoardList(Model model) throws Exception {

		model.addAttribute("boardList", boardService.getBoardList());

		return "board/index";

	}

	@RequestMapping("/boardForm")
	public String boardForm() {

		return "board/boardForm";

	}
	
	
	//RedirectAttributes 를 사용하는 또 다른 이유는 브라우저의 '뒤로가기' 버튼에 대한 대응책
	//글을 쓰고 저장 버튼을 눌러 리스트 화면까지 보이는 단계를 생각해 보면 글쓰기화면 => 저장 단계(서버) => 리스트 화면
	//따라서 '뒤로가기' 버튼을 클릭하면 다시 한 번 '저장하기' 단계로 감
	//이 말은 일명 '게시물 도배'의 여지를 남겨 둘 수 있음.
	//이와 같은 일을 방지하기 위해 RedirectAttributes를 하게 되면 '저장단계' 를 지나 글쓰기 폼으로 돌아 감
	@RequestMapping(value = "/saveBoard", method = RequestMethod.POST)
	public String saveBoard(@ModelAttribute("BoardVO") BoardVO boardVO
			, RedirectAttributes rttr) throws Exception {

		boardService.insertBoard(boardVO);

		return "redirect:/board/getBoardList";
	}
	
	
	@RequestMapping(value = "/getBoardContent", method = RequestMethod.GET)
	public String getBoardContent(Model model, @RequestParam("bid") int bid) throws Exception {

		model.addAttribute("boardContent", boardService.getBoardContent(bid));

		return "board/boardContent";

	}
}
